{"version":3,"sources":["config.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","window","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","heartbeat","items","newTitle","newDescription","handleSubmit","bind","assertThisInitialized","handleDelete","_this2","axios","get","then","_ref","data","setState","todos","id","_this3","delete","toConsumableArray","filter","i","event","_this4","preventDefault","post","title","description","_ref2","concat","todo","_this5","react_default","a","createElement","className","Container","style","marginLeft","Row","Col","marginTop","map","item","index","xs","key","Card","Body","Title","Button","variant","float","size","onClick","Text","Form","onSubmit","margin","Group","as","md","controlId","Control","required","type","placeholder","value","onChange","e","target","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1bdd2974.chunk.js","sourcesContent":["export const API_URL = window.API_URL + \"/\";","import React from 'react';\nimport axios from 'axios';\nimport {API_URL} from './config';\nimport { Container, Row, Col, Card, Form, Button } from 'react-bootstrap';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = { \n      heartbeat: \"Loading\",\n      items: [],\n      newTitle: \"\",\n      newDescription: \"\"\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get(API_URL + \"api/todos\").then(({data}) => {\n      this.setState({items: data.todos});\n    });\n  }\n\n  handleDelete(id) {\n    axios.delete(API_URL + \"api/todos/\" + id).then(() => {\n      this.setState({items: [...this.state.items.filter(i => i.id !== id)]});\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    axios.post(API_URL + \"api/todos\", {\n      title: this.state.newTitle,\n      description: this.state.newDescription\n    }).then(({data}) => {\n      this.setState({items: [...this.state.items, data.todo]});\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Container style={{marginLeft: 20}}>\n            <Row>\n              <Col>\n                <h1>\n                  Sample To Do App\n                </h1>\n              </Col>\n            </Row>\n            <Row style={{ marginTop: 10 }}>\n              {this.state.items.map((item, index) => \n                <Col xs={4} key={index}>\n                  <Card>\n                    <Card.Body>\n                      <Card.Title>\n                        {item.title}\n                        <Button \n                          variant=\"danger\" \n                          style={{float: \"right\"}} \n                          size=\"sm\"\n                          onClick={() => this.handleDelete(item.id)}>\n                            x\n                        </Button>\n                      </Card.Title>\n                      <Card.Text>\n                        {item.description}\n                      </Card.Text>\n                    </Card.Body>\n                  </Card>\n                </Col>\n              )}\n            </Row>\n            <Form onSubmit={this.handleSubmit} style={{margin: 10}}>\n              <Form.Row>\n                <Form.Group as={Col} md=\"4\" controlId=\"validationCustom01\">\n                  <Form.Control\n                    required\n                    type=\"text\"\n                    placeholder=\"Title\"\n                    value={this.state.newTitle}\n                    onChange={e => this.setState({ newTitle: e.target.value })}\n                  />\n                </Form.Group>\n                <Form.Group as={Col} md=\"4\" controlId=\"validationCustom01\">\n                  <Form.Control\n                    required\n                    type=\"text\"\n                    placeholder=\"Description\"\n                    value={this.state.newDescription}\n                    onChange={e => this.setState({ newDescription: e.target.value })}\n                  />\n                </Form.Group>\n                <Button type=\"submit\">Add new</Button>\n              </Form.Row>\n            </Form>\n          </Container>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}